version: '3.8'

services:
  # Infrastructure Services
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: tft_trading
      POSTGRES_USER: tft_user
      POSTGRES_PASSWORD: tft_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  # Microservices
  data-ingestion:
    build: ./microservices/data-ingestion
    ports:
      - "8001:8001"
    environment:
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    extra_hosts:
      - "kafka:127.0.0.1"

  sentiment-engine:
    build:
      context: ./microservices/sentiment-engine
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data/models:/app/models
    restart: unless-stopped

  tft-predictor:
    build:
      context: ./microservices/tft-predictor
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MODEL_ARTIFACT_PATH=/app/models
    depends_on:
      - postgres
      - redis
    volumes:
      - ./data/models:/app/models
      - ./data/mlflow:/mlflow
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  trading-engine:
    build:
      context: ./microservices/trading-engine
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - ALPACA_BASE_URL=https://paper-api.alpaca.markets
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  orchestrator:
    build:
      context: ./microservices/orchestrator
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - DATA_INGESTION_URL=http://data-ingestion:8001
      - SENTIMENT_ENGINE_URL=http://sentiment-engine:8002
      - TFT_PREDICTOR_URL=http://tft-predictor:8003
      - TRADING_ENGINE_URL=http://trading-engine:8004
    depends_on:
      - postgres
      - redis
      - data-ingestion
      - sentiment-engine
      - tft-predictor
      - trading-engine
    restart: unless-stopped

  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://tft_user:tft_password@postgres:5432/mlflow
    depends_on:
      - postgres
    volumes:
      - ./data/mlflow:/mlflow
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server --backend-store-uri postgresql://tft_user:tft_password@postgres:5432/mlflow --default-artifact-root /mlflow --host 0.0.0.0 --port 5000
      "
    restart: unless-stopped
    # For GPU support (uncomment if you have NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  tft-predictor:
    build: ./microservices/tft-predictor
    ports:
      - "8003:8003"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    # For GPU support (uncomment if you have NVIDIA GPU)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  trading-engine:
    build: ./microservices/trading-engine
    ports:
      - "8004:8004"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://tft_user:tft_password@postgres:5432/tft_trading
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_API_SECRET=${ALPACA_API_SECRET}
      - ALPACA_BASE_URL=${ALPACA_BASE_URL:-https://paper-api.alpaca.markets}
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  orchestrator:
    build: ./microservices/orchestrator
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker:9092
      - REDIS_URL=redis://redis:6379
      - DATA_INGESTION_URL=http://data-ingestion:8001
      - SENTIMENT_ENGINE_URL=http://sentiment-engine:8002
      - TFT_PREDICTOR_URL=http://tft-predictor:8003
      - TRADING_ENGINE_URL=http://trading-engine:8004
    depends_on:
      - redis
      - data-ingestion
      - sentiment-engine
      - tft-predictor
      - trading-engine
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning

  # Optional: Kafka UI for debugging (using external Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: localhost:29092
    extra_hosts:
      - "localhost:host-gateway"

  # Optional: Redis Commander for debugging
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis

volumes:
  redis_data:
  postgres_data:
  grafana_data:

networks:
  default:
    external:
      name: tft_network
